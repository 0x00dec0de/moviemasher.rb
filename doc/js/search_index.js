var search_data = {"index":{"searchIndex":["moviemasher","av","asset","awsinitservice","azureinitservice","callback","chain","chaineffects","chainmodule","chainoverlay","chainscaler","clip","configuration","defaults","destination","downloadservice","error","configuration","critical","job","jobinput","joboutput","jobrender","jobsource","jobsyntax","jobupload","object","parameter","runtime","state","todo","evaluate","filedownloadservice","filehelper","filequeueservice","fileuploadservice","fill","filter","filterevaluated","filterhash","filterhelpers","filtersetpts","filtersource","filtersourcecolor","filtersourcemovie","floatutil","gain","graph","graphmash","graphraw","hashable","httpdownloadservice","httpuploadservice","httpsdownloadservice","httpsuploadservice","info","initservice","input","intermediate","job","layer","layercolor","layermodule","layerraw","layerrawimage","layerrawvideo","layertheme","layertransition","mash","metareader","method","output","parameters","path","queueservice","s3downloadservice","s3uploadservice","service","shellhelper","source","sqsqueueservice","timerange","transfer","uploadservice","<<()","[]()","[]()","[]=()","__av_type_for_output()","__configure()","__create_service()","__init_time()","__queue()","__s3()","__s3()","__s3_bucket()","__s3_bucket()","__service_names()","_info()","_meta()","add_slash_end()","add_slash_start()","add_slashes()","audio()","audio()","audio_bitrate()","audio_bitrate=()","audio_codec()","audio_codec=()","audio_duration()","audio_rate()","audio_rate=()","av()","av()","av_type()","backcolor()","backcolor=()","base_source()","base_source()","base_source()","base_source=()","bucket()","bucket=()","callbacks()","chain_command()","chain_command()","class_symbol()","clip_has_audio()","clips_having_audio()","clips_in_range()","cmp()","concat()","configuration()","configuration()","configure()","configure()","configure()","configure()","configure_services()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_if()","create_if()","create_if()","data()","data=()","destination()","destination()","destination=()","destination=()","dimensions()","dimensions()","dimensions()","dimensions=()","dimensions=()","directory()","directory=()","directory_files()","directory_files()","directory_files()","directory_path()","download()","download()","download()","download()","download()","download_source()","downloader()","dup()","duration()","duration()","duration()","duration()","duration=()","duration=()","end_seconds()","equals?()","equation()","error()","error=()","error?()","error?()","error?()","error?()","error?()","error?()","execute()","extension()","extension()","extension()","extension()","extension=()","extension=()","extension=()","extension=()","ffmpeg()","file_name()","file_name()","fill()","fill=()","forecolor()","forecolor=()","fps()","full_path()","gain()","gain=()","gain_changes()","get()","goodbye()","gtr()","gtre()","has_audio?()","has_video?()","hash()","hash?()","hello()","host()","host=()","http()","id()","identifier()","includes?()","init()","init()","init()","init_av_input()","init_hash()","init_hash()","init_hash()","init_hash()","init_hash()","init_hash()","init_hash()","init_input()","init_mash_input()","init_string()","initer()","initialize_filters()","initialize_filters()","initialize_filters()","input_scope()","inputs()","intersection()","keys()","length()","length()","length()","length()","length=()","length=()","length=()","length=()","length_seconds()","less()","log()","log_entry()","loop()","loop()","loop=()","loop=()","mash()","mash=()","max()","media()","media()","media_count_for_clips()","media_search()","merge()","meta_path()","metadata()","metadata()","method()","method=()","min()","mm_cmp()","mm_dir_horz()","mm_dir_vert()","mm_fontfamily()","mm_fontfile()","mm_horz()","mm_max()","mm_min()","mm_paren()","mm_textfile()","mm_vert()","module_for_type()","module_source()","module_source()","module_source()","module_source=()","name()","name()","name()","name()","name=()","name=()","name=()","name=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_audio()","no_audio()","no_audio=()","no_audio=()","no_video()","no_video=()","object()","offset()","offset()","offset=()","offset=()","outputs()","outputs_desire()","parameters()","parameters=()","parse()","pass()","pass=()","path()","path()","path=()","path=()","port()","port=()","precision()","precision()","precision=()","preflight()","preflight()","preflight()","preflight()","preflight()","process()","process()","process_jobs()","process_queues()","progress()","progress_seconds()","progress_seconds=()","quality()","quality=()","query_parameters()","queues()","rate()","rate=()","receive_job()","receive_job()","receive_job()","region()","region=()","relative?()","required()","required=()","resolved_hash()","resolved_string()","rgb()","rgba()","safe_path()","secure()","secure()","secure()","secure()","set()","sort()","source()","source=()","sox()","start()","start()","start()","start=()","start=()","start=()","start_seconds()","stop()","string()","string_type()","strip_slash_end()","strip_slash_start()","strip_slashes()","symbolize_hash!()","synchronize()","to_hash()","to_json()","to_s()","trigger()","trigger=()","type()","type()","type()","type()","type()","type=()","type=()","type=()","upload()","upload()","upload()","upload()","upload()","uploader()","url()","url()","url_count()","user()","user=()","value()","values()","video()","video_bitrate()","video_bitrate=()","video_codec()","video_codec=()","video_duration()","video_format()","video_format=()","video_ranges()","video_rate()","video_rate=()","documentation","readme"],"longSearchIndex":["moviemasher","moviemasher::av","moviemasher::asset","moviemasher::awsinitservice","moviemasher::azureinitservice","moviemasher::callback","moviemasher::chain","moviemasher::chaineffects","moviemasher::chainmodule","moviemasher::chainoverlay","moviemasher::chainscaler","moviemasher::clip","moviemasher::configuration","moviemasher::defaults","moviemasher::destination","moviemasher::downloadservice","moviemasher::error","moviemasher::error::configuration","moviemasher::error::critical","moviemasher::error::job","moviemasher::error::jobinput","moviemasher::error::joboutput","moviemasher::error::jobrender","moviemasher::error::jobsource","moviemasher::error::jobsyntax","moviemasher::error::jobupload","moviemasher::error::object","moviemasher::error::parameter","moviemasher::error::runtime","moviemasher::error::state","moviemasher::error::todo","moviemasher::evaluate","moviemasher::filedownloadservice","moviemasher::filehelper","moviemasher::filequeueservice","moviemasher::fileuploadservice","moviemasher::fill","moviemasher::filter","moviemasher::filterevaluated","moviemasher::filterhash","moviemasher::filterhelpers","moviemasher::filtersetpts","moviemasher::filtersource","moviemasher::filtersourcecolor","moviemasher::filtersourcemovie","moviemasher::floatutil","moviemasher::gain","moviemasher::graph","moviemasher::graphmash","moviemasher::graphraw","moviemasher::hashable","moviemasher::httpdownloadservice","moviemasher::httpuploadservice","moviemasher::httpsdownloadservice","moviemasher::httpsuploadservice","moviemasher::info","moviemasher::initservice","moviemasher::input","moviemasher::intermediate","moviemasher::job","moviemasher::layer","moviemasher::layercolor","moviemasher::layermodule","moviemasher::layerraw","moviemasher::layerrawimage","moviemasher::layerrawvideo","moviemasher::layertheme","moviemasher::layertransition","moviemasher::mash","moviemasher::metareader","moviemasher::method","moviemasher::output","moviemasher::parameters","moviemasher::path","moviemasher::queueservice","moviemasher::s3downloadservice","moviemasher::s3uploadservice","moviemasher::service","moviemasher::shellhelper","moviemasher::source","moviemasher::sqsqueueservice","moviemasher::timerange","moviemasher::transfer","moviemasher::uploadservice","moviemasher::chain#<<()","moviemasher::hashable#[]()","moviemasher::metareader#[]()","moviemasher::hashable#[]=()","moviemasher::output::__av_type_for_output()","moviemasher::sqsqueueservice#__configure()","moviemasher::service::__create_service()","moviemasher::input::__init_time()","moviemasher::sqsqueueservice#__queue()","moviemasher::s3downloadservice#__s3()","moviemasher::s3uploadservice#__s3()","moviemasher::s3downloadservice#__s3_bucket()","moviemasher::s3uploadservice#__s3_bucket()","moviemasher::service::__service_names()","moviemasher::metareader#_info()","moviemasher::metareader#_meta()","moviemasher::path::add_slash_end()","moviemasher::path::add_slash_start()","moviemasher::path::add_slashes()","moviemasher::mash#audio()","moviemasher::metareader#audio()","moviemasher::output#audio_bitrate()","moviemasher::output#audio_bitrate=()","moviemasher::output#audio_codec()","moviemasher::output#audio_codec=()","moviemasher::metareader#audio_duration()","moviemasher::output#audio_rate()","moviemasher::output#audio_rate=()","moviemasher::asset#av()","moviemasher::output#av()","moviemasher::asset::av_type()","moviemasher::output#backcolor()","moviemasher::output#backcolor=()","moviemasher::clip#base_source()","moviemasher::input#base_source()","moviemasher::job#base_source()","moviemasher::job#base_source=()","moviemasher::transfer#bucket()","moviemasher::transfer#bucket=()","moviemasher::job#callbacks()","moviemasher::chain#chain_command()","moviemasher::chainmodule#chain_command()","moviemasher::hashable#class_symbol()","moviemasher::mash::clip_has_audio()","moviemasher::mash::clips_having_audio()","moviemasher::mash::clips_in_range()","moviemasher::floatutil::cmp()","moviemasher::path::concat()","moviemasher::configuration()","moviemasher::service#configuration()","moviemasher::configure()","moviemasher::filequeueservice#configure()","moviemasher::service#configure()","moviemasher::sqsqueueservice#configure()","moviemasher::service::configure_services()","moviemasher::asset::create()","moviemasher::callback::create()","moviemasher::clip::create()","moviemasher::destination::create()","moviemasher::input::create()","moviemasher::job::create()","moviemasher::output::create()","moviemasher::source::create()","moviemasher::transfer::create()","moviemasher::destination::create_if()","moviemasher::source::create_if()","moviemasher::transfer::create_if()","moviemasher::callback#data()","moviemasher::callback#data=()","moviemasher::job#destination()","moviemasher::output#destination()","moviemasher::job#destination=()","moviemasher::output#destination=()","moviemasher::asset#dimensions()","moviemasher::metareader#dimensions()","moviemasher::output#dimensions()","moviemasher::asset#dimensions=()","moviemasher::output#dimensions=()","moviemasher::transfer#directory()","moviemasher::transfer#directory=()","moviemasher::destination#directory_files()","moviemasher::fileuploadservice#directory_files()","moviemasher::uploadservice#directory_files()","moviemasher::transfer#directory_path()","moviemasher::asset#download()","moviemasher::downloadservice#download()","moviemasher::filedownloadservice#download()","moviemasher::httpdownloadservice#download()","moviemasher::s3downloadservice#download()","moviemasher::asset#download_source()","moviemasher::service::downloader()","moviemasher::timerange#dup()","moviemasher::asset#duration()","moviemasher::clip#duration()","moviemasher::mash::duration()","moviemasher::metareader#duration()","moviemasher::asset#duration=()","moviemasher::clip#duration=()","moviemasher::timerange#end_seconds()","moviemasher::timerange#equals?()","moviemasher::evaluate::equation()","moviemasher::job#error()","moviemasher::job#error=()","moviemasher::asset#error?()","moviemasher::clip#error?()","moviemasher::destination#error?()","moviemasher::job#error?()","moviemasher::output#error?()","moviemasher::transfer#error?()","moviemasher::shellhelper::execute()","moviemasher::callback#extension()","moviemasher::output#extension()","moviemasher::source#extension()","moviemasher::transfer#extension()","moviemasher::callback#extension=()","moviemasher::output#extension=()","moviemasher::source#extension=()","moviemasher::transfer#extension=()","moviemasher::metareader#ffmpeg()","moviemasher::output#file_name()","moviemasher::transfer#file_name()","moviemasher::input#fill()","moviemasher::input#fill=()","moviemasher::output#forecolor()","moviemasher::output#forecolor=()","moviemasher::metareader#fps()","moviemasher::transfer#full_path()","moviemasher::asset#gain()","moviemasher::asset#gain=()","moviemasher::mash::gain_changes()","moviemasher::info::get()","moviemasher::goodbye()","moviemasher::floatutil::gtr()","moviemasher::floatutil::gtre()","moviemasher::mash::has_audio?()","moviemasher::mash::has_video?()","moviemasher::hashable#hash()","moviemasher::mash::hash?()","moviemasher::hello()","moviemasher::transfer#host()","moviemasher::transfer#host=()","moviemasher::metareader#http()","moviemasher::job#id()","moviemasher::hashable#identifier()","moviemasher::av::includes?()","moviemasher::awsinitservice#init()","moviemasher::azureinitservice#init()","moviemasher::initservice#init()","moviemasher::mash::init_av_input()","moviemasher::callback::init_hash()","moviemasher::destination::init_hash()","moviemasher::input::init_hash()","moviemasher::mash::init_hash()","moviemasher::output::init_hash()","moviemasher::source::init_hash()","moviemasher::transfer::init_hash()","moviemasher::mash::init_input()","moviemasher::mash::init_mash_input()","moviemasher::source::init_string()","moviemasher::service::initer()","moviemasher::chain#initialize_filters()","moviemasher::chaineffects#initialize_filters()","moviemasher::chainmodule#initialize_filters()","moviemasher::chainmodule#input_scope()","moviemasher::job#inputs()","moviemasher::timerange#intersection()","moviemasher::hashable#keys()","moviemasher::asset#length()","moviemasher::clip#length()","moviemasher::input#length()","moviemasher::timerange#length()","moviemasher::asset#length=()","moviemasher::clip#length=()","moviemasher::input#length=()","moviemasher::timerange#length=()","moviemasher::timerange#length_seconds()","moviemasher::floatutil::less()","moviemasher::job#log()","moviemasher::job#log_entry()","moviemasher::asset#loop()","moviemasher::clip#loop()","moviemasher::asset#loop=()","moviemasher::clip#loop=()","moviemasher::input#mash()","moviemasher::input#mash=()","moviemasher::floatutil::max()","moviemasher::mash#media()","moviemasher::mash::media()","moviemasher::mash::media_count_for_clips()","moviemasher::mash::media_search()","moviemasher::av::merge()","moviemasher::info::meta_path()","moviemasher::asset#metadata()","moviemasher::output#metadata()","moviemasher::transfer#method()","moviemasher::transfer#method=()","moviemasher::floatutil::min()","moviemasher::filterhelpers::mm_cmp()","moviemasher::filterhelpers::mm_dir_horz()","moviemasher::filterhelpers::mm_dir_vert()","moviemasher::filterhelpers::mm_fontfamily()","moviemasher::filterhelpers::mm_fontfile()","moviemasher::filterhelpers::mm_horz()","moviemasher::filterhelpers::mm_max()","moviemasher::filterhelpers::mm_min()","moviemasher::filterhelpers::mm_paren()","moviemasher::filterhelpers::mm_textfile()","moviemasher::filterhelpers::mm_vert()","moviemasher::defaults::module_for_type()","moviemasher::clip#module_source()","moviemasher::input#module_source()","moviemasher::job#module_source()","moviemasher::job#module_source=()","moviemasher::callback#name()","moviemasher::output#name()","moviemasher::source#name()","moviemasher::transfer#name()","moviemasher::callback#name=()","moviemasher::output#name=()","moviemasher::source#name=()","moviemasher::transfer#name=()","moviemasher::chain::new()","moviemasher::chainmodule::new()","moviemasher::error::jobrender::new()","moviemasher::error::runtime::new()","moviemasher::hashable::new()","moviemasher::input::new()","moviemasher::job::new()","moviemasher::mash::new()","moviemasher::metareader::new()","moviemasher::output::new()","moviemasher::source::new()","moviemasher::sqsqueueservice::new()","moviemasher::timerange::new()","moviemasher::transfer::new()","moviemasher::asset#no_audio()","moviemasher::output#no_audio()","moviemasher::asset#no_audio=()","moviemasher::output#no_audio=()","moviemasher::asset#no_video()","moviemasher::asset#no_video=()","moviemasher::evaluate::object()","moviemasher::asset#offset()","moviemasher::input#offset()","moviemasher::asset#offset=()","moviemasher::input#offset=()","moviemasher::job#outputs()","moviemasher::job#outputs_desire()","moviemasher::transfer#parameters()","moviemasher::transfer#parameters=()","moviemasher::info::parse()","moviemasher::transfer#pass()","moviemasher::transfer#pass=()","moviemasher::output#path()","moviemasher::transfer#path()","moviemasher::output#path=()","moviemasher::transfer#path=()","moviemasher::transfer#port()","moviemasher::transfer#port=()","moviemasher::floatutil::precision()","moviemasher::output#precision()","moviemasher::output#precision=()","moviemasher::asset#preflight()","moviemasher::input#preflight()","moviemasher::job#preflight()","moviemasher::mash#preflight()","moviemasher::output#preflight()","moviemasher::process()","moviemasher::job#process()","moviemasher::process_jobs()","moviemasher::process_queues()","moviemasher::job#progress()","moviemasher::callback#progress_seconds()","moviemasher::callback#progress_seconds=()","moviemasher::output#quality()","moviemasher::output#quality=()","moviemasher::service::query_parameters()","moviemasher::service::queues()","moviemasher::timerange#rate()","moviemasher::timerange#rate=()","moviemasher::filequeueservice#receive_job()","moviemasher::queueservice#receive_job()","moviemasher::sqsqueueservice#receive_job()","moviemasher::transfer#region()","moviemasher::transfer#region=()","moviemasher::transfer#relative?()","moviemasher::output#required()","moviemasher::output#required=()","moviemasher::job::resolved_hash()","moviemasher::job::resolved_string()","moviemasher::filterhelpers::rgb()","moviemasher::filterhelpers::rgba()","moviemasher::filehelper::safe_path()","moviemasher::httpdownloadservice#secure()","moviemasher::httpuploadservice#secure()","moviemasher::httpsdownloadservice#secure()","moviemasher::httpsuploadservice#secure()","moviemasher::info::set()","moviemasher::floatutil::sort()","moviemasher::asset#source()","moviemasher::asset#source=()","moviemasher::metareader#sox()","moviemasher::clip#start()","moviemasher::input#start()","moviemasher::timerange#start()","moviemasher::clip#start=()","moviemasher::input#start=()","moviemasher::timerange#start=()","moviemasher::timerange#start_seconds()","moviemasher::timerange#stop()","moviemasher::floatutil::string()","moviemasher::job::string_type()","moviemasher::path::strip_slash_end()","moviemasher::path::strip_slash_start()","moviemasher::path::strip_slashes()","moviemasher::job::symbolize_hash!()","moviemasher::timerange#synchronize()","moviemasher::hashable#to_hash()","moviemasher::hashable#to_json()","moviemasher::error::runtime#to_s()","moviemasher::callback#trigger()","moviemasher::callback#trigger=()","moviemasher::asset#type()","moviemasher::info::type()","moviemasher::metareader#type()","moviemasher::output#type()","moviemasher::transfer#type()","moviemasher::asset#type=()","moviemasher::output#type=()","moviemasher::transfer#type=()","moviemasher::destination#upload()","moviemasher::fileuploadservice#upload()","moviemasher::httpuploadservice#upload()","moviemasher::s3uploadservice#upload()","moviemasher::uploadservice#upload()","moviemasher::service::uploader()","moviemasher::asset#url()","moviemasher::transfer#url()","moviemasher::mash#url_count()","moviemasher::transfer#user()","moviemasher::transfer#user=()","moviemasher::evaluate::value()","moviemasher::hashable#values()","moviemasher::mash#video()","moviemasher::output#video_bitrate()","moviemasher::output#video_bitrate=()","moviemasher::output#video_codec()","moviemasher::output#video_codec=()","moviemasher::metareader#video_duration()","moviemasher::output#video_format()","moviemasher::output#video_format=()","moviemasher::mash::video_ranges()","moviemasher::output#video_rate()","moviemasher::output#video_rate=()","",""],"info":[["MovieMasher","","MovieMasher.html","","<p>Handles global configuration and high level processing of Job objects. The \n::process_queues method will …\n"],["MovieMasher::AV","","MovieMasher/AV.html","",""],["MovieMasher::Asset","","MovieMasher/Asset.html","",""],["MovieMasher::AwsInitService","","MovieMasher/AwsInitService.html","",""],["MovieMasher::AzureInitService","","MovieMasher/AzureInitService.html","",""],["MovieMasher::Callback","","MovieMasher/Callback.html","","<p>A Transfer object and element in Job#callbacks representing a remote\nrequest triggered at a particular …\n"],["MovieMasher::Chain","","MovieMasher/Chain.html","","<p>chain\n"],["MovieMasher::ChainEffects","","MovieMasher/ChainEffects.html","",""],["MovieMasher::ChainModule","","MovieMasher/ChainModule.html","",""],["MovieMasher::ChainOverlay","","MovieMasher/ChainOverlay.html","",""],["MovieMasher::ChainScaler","","MovieMasher/ChainScaler.html","",""],["MovieMasher::Clip","","MovieMasher/Clip.html","",""],["MovieMasher::Configuration","","MovieMasher/Configuration.html","",""],["MovieMasher::Defaults","","MovieMasher/Defaults.html","",""],["MovieMasher::Destination","","MovieMasher/Destination.html","","<p>A Transfer object used as Job#destination or Output#destination\nrepresenting a remote host ready to accept …\n"],["MovieMasher::DownloadService","","MovieMasher/DownloadService.html","",""],["MovieMasher::Error","","MovieMasher/Error.html","",""],["MovieMasher::Error::Configuration","","MovieMasher/Error/Configuration.html","",""],["MovieMasher::Error::Critical","","MovieMasher/Error/Critical.html","","<p>serious code errors\n"],["MovieMasher::Error::Job","","MovieMasher/Error/Job.html","","<p>job related errors\n"],["MovieMasher::Error::JobInput","","MovieMasher/Error/JobInput.html","",""],["MovieMasher::Error::JobOutput","","MovieMasher/Error/JobOutput.html","",""],["MovieMasher::Error::JobRender","","MovieMasher/Error/JobRender.html","",""],["MovieMasher::Error::JobSource","","MovieMasher/Error/JobSource.html","",""],["MovieMasher::Error::JobSyntax","","MovieMasher/Error/JobSyntax.html","",""],["MovieMasher::Error::JobUpload","","MovieMasher/Error/JobUpload.html","",""],["MovieMasher::Error::Object","","MovieMasher/Error/Object.html","",""],["MovieMasher::Error::Parameter","","MovieMasher/Error/Parameter.html","",""],["MovieMasher::Error::Runtime","","MovieMasher/Error/Runtime.html","",""],["MovieMasher::Error::State","","MovieMasher/Error/State.html","",""],["MovieMasher::Error::Todo","","MovieMasher/Error/Todo.html","",""],["MovieMasher::Evaluate","","MovieMasher/Evaluate.html","",""],["MovieMasher::FileDownloadService","","MovieMasher/FileDownloadService.html","",""],["MovieMasher::FileHelper","","MovieMasher/FileHelper.html","",""],["MovieMasher::FileQueueService","","MovieMasher/FileQueueService.html","",""],["MovieMasher::FileUploadService","","MovieMasher/FileUploadService.html","",""],["MovieMasher::Fill","","MovieMasher/Fill.html","",""],["MovieMasher::Filter","","MovieMasher/Filter.html","",""],["MovieMasher::FilterEvaluated","","MovieMasher/FilterEvaluated.html","",""],["MovieMasher::FilterHash","","MovieMasher/FilterHash.html","",""],["MovieMasher::FilterHelpers","","MovieMasher/FilterHelpers.html","",""],["MovieMasher::FilterSetpts","","MovieMasher/FilterSetpts.html","",""],["MovieMasher::FilterSource","","MovieMasher/FilterSource.html","",""],["MovieMasher::FilterSourceColor","","MovieMasher/FilterSourceColor.html","",""],["MovieMasher::FilterSourceMovie","","MovieMasher/FilterSourceMovie.html","",""],["MovieMasher::FloatUtil","","MovieMasher/FloatUtil.html","",""],["MovieMasher::Gain","","MovieMasher/Gain.html","",""],["MovieMasher::Graph","","MovieMasher/Graph.html","",""],["MovieMasher::GraphMash","","MovieMasher/GraphMash.html","",""],["MovieMasher::GraphRaw","","MovieMasher/GraphRaw.html","",""],["MovieMasher::Hashable","","MovieMasher/Hashable.html","","<p>Base class for mocking a Hash.\n"],["MovieMasher::HttpDownloadService","","MovieMasher/HttpDownloadService.html","",""],["MovieMasher::HttpUploadService","","MovieMasher/HttpUploadService.html","",""],["MovieMasher::HttpsDownloadService","","MovieMasher/HttpsDownloadService.html","",""],["MovieMasher::HttpsUploadService","","MovieMasher/HttpsUploadService.html","",""],["MovieMasher::Info","","MovieMasher/Info.html","",""],["MovieMasher::InitService","","MovieMasher/InitService.html","",""],["MovieMasher::Input","","MovieMasher/Input.html","","<p>An element in Job#inputs representing media to be included in the mashup, \nwhich is eventually rendered …\n"],["MovieMasher::Intermediate","","MovieMasher/Intermediate.html","",""],["MovieMasher::Job","","MovieMasher/Job.html","","<p>Represents a single transcoding operation. Once #process is called all of\nthe  job&#39;s #inputs are …\n"],["MovieMasher::Layer","","MovieMasher/Layer.html","",""],["MovieMasher::LayerColor","","MovieMasher/LayerColor.html","",""],["MovieMasher::LayerModule","","MovieMasher/LayerModule.html","",""],["MovieMasher::LayerRaw","","MovieMasher/LayerRaw.html","",""],["MovieMasher::LayerRawImage","","MovieMasher/LayerRawImage.html","",""],["MovieMasher::LayerRawVideo","","MovieMasher/LayerRawVideo.html","",""],["MovieMasher::LayerTheme","","MovieMasher/LayerTheme.html","",""],["MovieMasher::LayerTransition","","MovieMasher/LayerTransition.html","",""],["MovieMasher::Mash","","MovieMasher/Mash.html","","<p>Input#source of mash inputs, representing a collection #media arranged on\n#audio and #video tracks.  …\n"],["MovieMasher::MetaReader","","MovieMasher/MetaReader.html","",""],["MovieMasher::Method","","MovieMasher/Method.html","",""],["MovieMasher::Output","","MovieMasher/Output.html","","<p>Represents a single rendered version of the mashup, including all\nformatting  parameters and quality …\n"],["MovieMasher::Parameters","","MovieMasher/Parameters.html","",""],["MovieMasher::Path","","MovieMasher/Path.html","",""],["MovieMasher::QueueService","","MovieMasher/QueueService.html","",""],["MovieMasher::S3DownloadService","","MovieMasher/S3DownloadService.html","",""],["MovieMasher::S3UploadService","","MovieMasher/S3UploadService.html","",""],["MovieMasher::Service","","MovieMasher/Service.html","",""],["MovieMasher::ShellHelper","","MovieMasher/ShellHelper.html","",""],["MovieMasher::Source","","MovieMasher/Source.html","","<p>A Transfer object used for Input#source and Media#source, describing how to\nretrieve an audio, image, …\n"],["MovieMasher::SqsQueueService","","MovieMasher/SqsQueueService.html","",""],["MovieMasher::TimeRange","","MovieMasher/TimeRange.html","",""],["MovieMasher::Transfer","","MovieMasher/Transfer.html","","<p>Base class for Callback and Source as well as used directly to resolve \nInput and Output relative paths …\n"],["MovieMasher::UploadService","","MovieMasher/UploadService.html","",""],["<<","MovieMasher::Chain","MovieMasher/Chain.html#method-i-3C-3C","(filter)",""],["[]","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-5B-5D","(symbol)","<p>Convenience getter for underlying data Hash.\n<p>symbol &mdash; Symbol key into hash.\n\n<p>Returns\n"],["[]","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-5B-5D","(symbol)",""],["[]=","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-5B-5D-3D","(symbol, value)","<p>Convenience setter for underlying data Hash.\n<p>symbol &mdash; Symbol key into hash.\n<p>value &mdash; Object to set at key.\n"],["__av_type_for_output","MovieMasher::Output","MovieMasher/Output.html#method-c-__av_type_for_output","(output)",""],["__configure","MovieMasher::SqsQueueService","MovieMasher/SqsQueueService.html#method-i-__configure","()",""],["__create_service","MovieMasher::Service","MovieMasher/Service.html#method-c-__create_service","(name, kind = :queue)",""],["__init_time","MovieMasher::Input","MovieMasher/Input.html#method-c-__init_time","(input, key)",""],["__queue","MovieMasher::SqsQueueService","MovieMasher/SqsQueueService.html#method-i-__queue","()",""],["__s3","MovieMasher::S3DownloadService","MovieMasher/S3DownloadService.html#method-i-__s3","(source)",""],["__s3","MovieMasher::S3UploadService","MovieMasher/S3UploadService.html#method-i-__s3","(source)",""],["__s3_bucket","MovieMasher::S3DownloadService","MovieMasher/S3DownloadService.html#method-i-__s3_bucket","(source)",""],["__s3_bucket","MovieMasher::S3UploadService","MovieMasher/S3UploadService.html#method-i-__s3_bucket","(source)",""],["__service_names","MovieMasher::Service","MovieMasher/Service.html#method-c-__service_names","(kind = :queue)",""],["_info","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-_info","(symbol)",""],["_meta","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-_meta","(symbol)",""],["add_slash_end","MovieMasher::Path","MovieMasher/Path.html#method-c-add_slash_end","(s)",""],["add_slash_start","MovieMasher::Path","MovieMasher/Path.html#method-c-add_slash_start","(s)",""],["add_slashes","MovieMasher::Path","MovieMasher/Path.html#method-c-add_slashes","(s)",""],["audio","MovieMasher::Mash","MovieMasher/Mash.html#method-i-audio","()","<p>Array &mdash; One or more Track objects.\n\n"],["audio","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-audio","()",""],["audio_bitrate","MovieMasher::Output","MovieMasher/Output.html#method-i-audio_bitrate","()",""],["audio_bitrate=","MovieMasher::Output","MovieMasher/Output.html#method-i-audio_bitrate-3D","(value)","<p>String &mdash; FFmpeg -b:a switch, placed before #audio_rate.\n<p>Integer &mdash; The character &#39;k&#39; will be appended. …\n"],["audio_codec","MovieMasher::Output","MovieMasher/Output.html#method-i-audio_codec","()",""],["audio_codec=","MovieMasher::Output","MovieMasher/Output.html#method-i-audio_codec-3D","(value)","<p>String &mdash; FFmpeg -c:a switch, placed after #audio_rate.\n<p>Default &mdash; aac -strict experimental\n<p>Types &mdash; TypeAudio …\n"],["audio_duration","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-audio_duration","()",""],["audio_rate","MovieMasher::Output","MovieMasher/Output.html#method-i-audio_rate","()",""],["audio_rate=","MovieMasher::Output","MovieMasher/Output.html#method-i-audio_rate-3D","(value)","<p>String &mdash; FFmpeg -r:a switch, placed after #audio_bitrate and before #audio_codec.\n<p>Default &mdash; 44100\n<p>Types &mdash; TypeAudio …\n"],["av","MovieMasher::Asset","MovieMasher/Asset.html#method-i-av","()","<p>String &mdash; The AV type.\n<p>Constant &mdash; AV::Audio, AV::Video, AV::Both, or AV::Neither if an error was encountered\n…\n"],["av","MovieMasher::Output","MovieMasher/Output.html#method-i-av","()","<p>String &mdash; The AV type.\n<p>Constant &mdash; AV::Audio, AV::Video or AV::Both.\n<p>Default &mdash; Based on #type and #no_audio.\n"],["av_type","MovieMasher::Asset","MovieMasher/Asset.html#method-c-av_type","(input)",""],["backcolor","MovieMasher::Output","MovieMasher/Output.html#method-i-backcolor","()",""],["backcolor=","MovieMasher::Output","MovieMasher/Output.html#method-i-backcolor-3D","(value)","<p>String &mdash; Six character hex, rgb(0,0,0) or standard color name.\n<p>Default &mdash; FFFFFF for TypeWaveform, black for …\n"],["base_source","MovieMasher::Clip","MovieMasher/Clip.html#method-i-base_source","()","<p>Transfer &mdash; Resolves relative URLs.\n<p>Default &mdash; Job#base_source\n<p>Types &mdash; Just TypeMash.\n"],["base_source","MovieMasher::Input","MovieMasher/Input.html#method-i-base_source","()","<p>Transfer &mdash; Resolves relative URLs.\n<p>Default &mdash; Job#base_source\n<p>Types &mdash; Just TypeMash.\n"],["base_source","MovieMasher::Job","MovieMasher/Job.html#method-i-base_source","()",""],["base_source=","MovieMasher::Job","MovieMasher/Job.html#method-i-base_source-3D","(value)","<p>Transfer &mdash; Resolves relative paths within Input#source and Media#source String values.\n\n"],["bucket","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-bucket","()",""],["bucket=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-bucket-3D","(value)","<p>String &mdash; Name of AWS S3 bucket where file is stored.\n<p>Types &mdash; Just TypeS3.\n\n"],["callbacks","MovieMasher::Job","MovieMasher/Job.html#method-i-callbacks","()","<p>Array &mdash; Zero or more Callback objects.\n\n"],["chain_command","MovieMasher::Chain","MovieMasher/Chain.html#method-i-chain_command","(scope, job_output)",""],["chain_command","MovieMasher::ChainModule","MovieMasher/ChainModule.html#method-i-chain_command","(scope, job_output)",""],["class_symbol","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-class_symbol","()","<p>Returns\n<p>Returns Symbol of lowercased class name without namespace qualifiers.\n"],["clip_has_audio","MovieMasher::Mash","MovieMasher/Mash.html#method-c-clip_has_audio","(clip)",""],["clips_having_audio","MovieMasher::Mash","MovieMasher/Mash.html#method-c-clips_having_audio","(mash)",""],["clips_in_range","MovieMasher::Mash","MovieMasher/Mash.html#method-c-clips_in_range","(mash, range, track_type)",""],["cmp","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-cmp","(f1, f2, digits = 3)",""],["concat","MovieMasher::Path","MovieMasher/Path.html#method-c-concat","(s1, s2)",""],["configuration","MovieMasher","MovieMasher.html#method-c-configuration","()","<p>Returns\n<p>Returns the configuration Hash with Symbol keys.\n"],["configuration","MovieMasher::Service","MovieMasher/Service.html#method-i-configuration","()",""],["configure","MovieMasher","MovieMasher.html#method-c-configure","(hash_or_path)","<p>hash_or_path &mdash; Set one or more configuration options. If supplied a String,  it&#39;s\nassumed to be a path …\n\n"],["configure","MovieMasher::FileQueueService","MovieMasher/FileQueueService.html#method-i-configure","(config)",""],["configure","MovieMasher::Service","MovieMasher/Service.html#method-i-configure","(config)",""],["configure","MovieMasher::SqsQueueService","MovieMasher/SqsQueueService.html#method-i-configure","(config)",""],["configure_services","MovieMasher::Service","MovieMasher/Service.html#method-c-configure_services","(config)",""],["create","MovieMasher::Asset","MovieMasher/Asset.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Callback","MovieMasher/Callback.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Clip","MovieMasher/Clip.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Destination","MovieMasher/Destination.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Input","MovieMasher/Input.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Job","MovieMasher/Job.html#method-c-create","(hash = nil)",""],["create","MovieMasher::Output","MovieMasher/Output.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Source","MovieMasher/Source.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create","MovieMasher::Transfer","MovieMasher/Transfer.html#method-c-create","(hash = nil)","<p>Returns\n<p>Returns a new instance.\n"],["create_if","MovieMasher::Destination","MovieMasher/Destination.html#method-c-create_if","(hash)",""],["create_if","MovieMasher::Source","MovieMasher/Source.html#method-c-create_if","(hash)",""],["create_if","MovieMasher::Transfer","MovieMasher/Transfer.html#method-c-create_if","(hash)",""],["data","MovieMasher::Callback","MovieMasher/Callback.html#method-i-data","()",""],["data=","MovieMasher::Callback","MovieMasher/Callback.html#method-i-data-3D","(value)","<p>Hash/Array - Values to recursively evaluate and parse into request body.\n<p>Default &mdash; nil\n\n"],["destination","MovieMasher::Job","MovieMasher/Job.html#method-i-destination","()",""],["destination","MovieMasher::Output","MovieMasher/Output.html#method-i-destination","()",""],["destination=","MovieMasher::Job","MovieMasher/Job.html#method-i-destination-3D","(value)","<p>Destination &mdash; Shared by all Output objects that don&#39;t have one of their own.\n\n"],["destination=","MovieMasher::Output","MovieMasher/Output.html#method-i-destination-3D","(value)","<p>Transfer &mdash; Describes where to upload this output.\n<p>Default &mdash; Job#destination\n\n"],["dimensions","MovieMasher::Asset","MovieMasher/Asset.html#method-i-dimensions","()",""],["dimensions","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-dimensions","()",""],["dimensions","MovieMasher::Output","MovieMasher/Output.html#method-i-dimensions","()",""],["dimensions=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-dimensions-3D","(value)","<p>String &mdash; WIDTHxHEIGHT of element.\n<p>Default &mdash; Probed from downloaded.\n<p>Types &mdash; TypeImage and TypeVideo.\n"],["dimensions=","MovieMasher::Output","MovieMasher/Output.html#method-i-dimensions-3D","(value)","<p>String &mdash; Output pixel size formatted as WIDTHxHEIGHT.\n<p>Default &mdash; 512x288 for TypeVideo, 8000x32 for TypeWaveform …\n"],["directory","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-directory","()",""],["directory=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-directory-3D","(value)","<p>String &mdash; Added to URL after #directory and before #name, with slash on either side.\n<p>Default &mdash; Nil means do …\n"],["directory_files","MovieMasher::Destination","MovieMasher/Destination.html#method-i-directory_files","(file)",""],["directory_files","MovieMasher::FileUploadService","MovieMasher/FileUploadService.html#method-i-directory_files","(path)",""],["directory_files","MovieMasher::UploadService","MovieMasher/UploadService.html#method-i-directory_files","(file)",""],["directory_path","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-directory_path","()",""],["download","MovieMasher::Asset","MovieMasher/Asset.html#method-i-download","(options)",""],["download","MovieMasher::DownloadService","MovieMasher/DownloadService.html#method-i-download","(options)",""],["download","MovieMasher::FileDownloadService","MovieMasher/FileDownloadService.html#method-i-download","(options)",""],["download","MovieMasher::HttpDownloadService","MovieMasher/HttpDownloadService.html#method-i-download","(options)",""],["download","MovieMasher::S3DownloadService","MovieMasher/S3DownloadService.html#method-i-download","(options)",""],["download_source","MovieMasher::Asset","MovieMasher/Asset.html#method-i-download_source","()",""],["downloader","MovieMasher::Service","MovieMasher/Service.html#method-c-downloader","(type)",""],["dup","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-dup","()",""],["duration","MovieMasher::Asset","MovieMasher/Asset.html#method-i-duration","()",""],["duration","MovieMasher::Clip","MovieMasher/Clip.html#method-i-duration","()",""],["duration","MovieMasher::Mash","MovieMasher/Mash.html#method-c-duration","(mash)",""],["duration","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-duration","()",""],["duration=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-duration-3D","(value)","<p>Float &mdash; Seconds of Asset available for presentation.\n<p>Default &mdash; Probed from downloaded.\n<p>Types &mdash; All except TypeImage …\n"],["duration=","MovieMasher::Clip","MovieMasher/Clip.html#method-i-duration-3D","(value)","<p>Float &mdash; Seconds of Clip available for presentation.\n<p>Default &mdash; Probed from downloaded.\n<p>Types &mdash; All except TypeImage …\n"],["end_seconds","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-end_seconds","()",""],["equals?","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-equals-3F","(range)",""],["equation","MovieMasher::Evaluate","MovieMasher/Evaluate.html#method-c-equation","(s, raise_on_fail = nil)",""],["error","MovieMasher::Job","MovieMasher/Job.html#method-i-error","()",""],["error=","MovieMasher::Job","MovieMasher/Job.html#method-i-error-3D","(value)","<p>Problem encountered during #new or #process. If the source of the problem\nis a  command line application …\n"],["error?","MovieMasher::Asset","MovieMasher/Asset.html#method-i-error-3F","()",""],["error?","MovieMasher::Clip","MovieMasher/Clip.html#method-i-error-3F","()",""],["error?","MovieMasher::Destination","MovieMasher/Destination.html#method-i-error-3F","()",""],["error?","MovieMasher::Job","MovieMasher/Job.html#method-i-error-3F","()",""],["error?","MovieMasher::Output","MovieMasher/Output.html#method-i-error-3F","()",""],["error?","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-error-3F","()",""],["execute","MovieMasher::ShellHelper","MovieMasher/ShellHelper.html#method-c-execute","(options)",""],["extension","MovieMasher::Callback","MovieMasher/Callback.html#method-i-extension","()",""],["extension","MovieMasher::Output","MovieMasher/Output.html#method-i-extension","()",""],["extension","MovieMasher::Source","MovieMasher/Source.html#method-i-extension","()",""],["extension","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-extension","()",""],["extension=","MovieMasher::Callback","MovieMasher/Callback.html#method-i-extension-3D","(value)","<p>String &mdash; Added to file path after #name, with period inserted between.\n\n"],["extension=","MovieMasher::Output","MovieMasher/Output.html#method-i-extension-3D","(value)","<p>String &mdash; Extension for rendered file, also implies format.\n<p>Default &mdash; Removed from #name if present, otherwise …\n\n"],["extension=","MovieMasher::Source","MovieMasher/Source.html#method-i-extension-3D","(value)","<p>String &mdash; Appended to file path after #name, with period inserted between.\n\n"],["extension=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-extension-3D","(value)","<p>String &mdash; Appended to file path after #name, with period inserted between.\n\n"],["ffmpeg","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-ffmpeg","()",""],["file_name","MovieMasher::Output","MovieMasher/Output.html#method-i-file_name","()",""],["file_name","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-file_name","()",""],["fill","MovieMasher::Input","MovieMasher/Input.html#method-i-fill","()",""],["fill=","MovieMasher::Input","MovieMasher/Input.html#method-i-fill-3D","(value)","<p>String &mdash; How to size in relation to Output#dimensions.\n<p>Constant &mdash; Fill::Crop, Fill::None, Fill::Scale or  …\n"],["forecolor","MovieMasher::Output","MovieMasher/Output.html#method-i-forecolor","()",""],["forecolor=","MovieMasher::Output","MovieMasher/Output.html#method-i-forecolor-3D","(value)","<p>String &mdash; Six character Hex color.\n<p>Default &mdash; 000000\n<p>Types &mdash; Only TypeWaveform.\n"],["fps","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-fps","()",""],["full_path","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-full_path","()",""],["gain","MovieMasher::Asset","MovieMasher/Asset.html#method-i-gain","()",""],["gain=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-gain-3D","(value)","<p>Float &mdash; Multiplier to adjust volume of audio when mixed into mashup.\n<p>Array &mdash; Duple Float values signifying …\n"],["gain_changes","MovieMasher::Mash","MovieMasher/Mash.html#method-c-gain_changes","(gain)",""],["get","MovieMasher::Info","MovieMasher/Info.html#method-c-get","(path, type)",""],["goodbye","MovieMasher","MovieMasher.html#method-c-goodbye","()","<p>Returns\n<p>Returns valediction for command line apps.\n"],["gtr","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-gtr","(big, small, digits = 3)",""],["gtre","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-gtre","(big, small, digits = 3)",""],["has_audio?","MovieMasher::Mash","MovieMasher/Mash.html#method-c-has_audio-3F","(mash)",""],["has_video?","MovieMasher::Mash","MovieMasher/Mash.html#method-c-has_video-3F","(mash)",""],["hash","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-hash","()",""],["hash?","MovieMasher::Mash","MovieMasher/Mash.html#method-c-hash-3F","(hash)",""],["hello","MovieMasher","MovieMasher.html#method-c-hello","()","<p>Returns\n<p>Returns salutation for command line apps.\n"],["host","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-host","()",""],["host=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-host-3D","(value)","<p>String &mdash; Remote server name or IP address where file is stored.\n<p>Types &mdash; TypeHttp and TypeHttps.\n\n"],["http","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-http","()",""],["id","MovieMasher::Job","MovieMasher/Job.html#method-i-id","()","<p>String &mdash; user supplied identifier.\n<p>Default &mdash; Nil, or messageId if the Job originated from an SQS message. …\n\n"],["identifier","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-identifier","()","<p>String &mdash; Unique identifier for object.\n\n"],["includes?","MovieMasher::AV","MovieMasher/AV.html#method-c-includes-3F","(has, desired)",""],["init","MovieMasher::AwsInitService","MovieMasher/AwsInitService.html#method-i-init","()",""],["init","MovieMasher::AzureInitService","MovieMasher/AzureInitService.html#method-i-init","()",""],["init","MovieMasher::InitService","MovieMasher/InitService.html#method-i-init","()",""],["init_av_input","MovieMasher::Mash","MovieMasher/Mash.html#method-c-init_av_input","(input)",""],["init_hash","MovieMasher::Callback","MovieMasher/Callback.html#method-c-init_hash","(hash)",""],["init_hash","MovieMasher::Destination","MovieMasher/Destination.html#method-c-init_hash","(hash)",""],["init_hash","MovieMasher::Input","MovieMasher/Input.html#method-c-init_hash","(input)",""],["init_hash","MovieMasher::Mash","MovieMasher/Mash.html#method-c-init_hash","(mash)",""],["init_hash","MovieMasher::Output","MovieMasher/Output.html#method-c-init_hash","(output)",""],["init_hash","MovieMasher::Source","MovieMasher/Source.html#method-c-init_hash","(hash = nil)",""],["init_hash","MovieMasher::Transfer","MovieMasher/Transfer.html#method-c-init_hash","(hash)",""],["init_input","MovieMasher::Mash","MovieMasher/Mash.html#method-c-init_input","(input)",""],["init_mash_input","MovieMasher::Mash","MovieMasher/Mash.html#method-c-init_mash_input","(input)",""],["init_string","MovieMasher::Source","MovieMasher/Source.html#method-c-init_string","(url)",""],["initer","MovieMasher::Service","MovieMasher/Service.html#method-c-initer","(type)",""],["initialize_filters","MovieMasher::Chain","MovieMasher/Chain.html#method-i-initialize_filters","()",""],["initialize_filters","MovieMasher::ChainEffects","MovieMasher/ChainEffects.html#method-i-initialize_filters","()",""],["initialize_filters","MovieMasher::ChainModule","MovieMasher/ChainModule.html#method-i-initialize_filters","()",""],["input_scope","MovieMasher::ChainModule","MovieMasher/ChainModule.html#method-i-input_scope","(scope)",""],["inputs","MovieMasher::Job","MovieMasher/Job.html#method-i-inputs","()","<p>Array &mdash; One or more Input objects.\n\n"],["intersection","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-intersection","(range)",""],["keys","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-keys","()",""],["length","MovieMasher::Asset","MovieMasher/Asset.html#method-i-length","()",""],["length","MovieMasher::Clip","MovieMasher/Clip.html#method-i-length","()",""],["length","MovieMasher::Input","MovieMasher/Input.html#method-i-length","()",""],["length","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-length","()",""],["length=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-length-3D","(value)","<p>Float &mdash; Seconds the Asset appears in the mashup.\n<p>Default &mdash; #duration - #offset\n\n"],["length=","MovieMasher::Clip","MovieMasher/Clip.html#method-i-length-3D","(value)","<p>Float &mdash; Seconds the Clip appears in the mashup.\n<p>Default &mdash; #duration - #offset\n\n"],["length=","MovieMasher::Input","MovieMasher/Input.html#method-i-length-3D","(value)","<p>Float &mdash; Seconds the input appears in the mashup.\n<p>Default &mdash; #duration - #offset\n\n"],["length=","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-length-3D","(n)",""],["length_seconds","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-length_seconds","(precision = 3)",""],["less","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-less","(small, big, digits = 3)",""],["log","MovieMasher::Job","MovieMasher/Job.html#method-i-log","()","<p>String &mdash; Current content of the job&#39;s log file.\n\n"],["log_entry","MovieMasher::Job","MovieMasher/Job.html#method-i-log_entry","(type, &proc)","<p>Output to the job&#39;s log file. If <strong>type</strong> is :error then\njob will be halted and  its #error will be set …\n"],["loop","MovieMasher::Asset","MovieMasher/Asset.html#method-i-loop","()",""],["loop","MovieMasher::Clip","MovieMasher/Clip.html#method-i-loop","()",""],["loop=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-loop-3D","(value)","<p>Integer &mdash; Number of times to loop Asset.\n<p>Types &mdash; Just TypeAudio.\n\n"],["loop=","MovieMasher::Clip","MovieMasher/Clip.html#method-i-loop-3D","(value)","<p>Integer &mdash; Number of times to loop Clip.\n<p>Types &mdash; Just TypeAudio.\n\n"],["mash","MovieMasher::Input","MovieMasher/Input.html#method-i-mash","()",""],["mash=","MovieMasher::Input","MovieMasher/Input.html#method-i-mash-3D","(value)","<p>Mash &mdash; The mash to include in rendering.\n<p>Default &mdash; nil\n<p>Types &mdash; Just TypeMash.\n"],["max","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-max","(a, b, digits = 3)",""],["media","MovieMasher::Mash","MovieMasher/Mash.html#method-i-media","()","<p>Array &mdash; One or more Media objects.\n\n"],["media","MovieMasher::Mash","MovieMasher/Mash.html#method-c-media","(mash, ob_or_id)",""],["media_count_for_clips","MovieMasher::Mash","MovieMasher/Mash.html#method-c-media_count_for_clips","(mash, clips, referenced)",""],["media_search","MovieMasher::Mash","MovieMasher/Mash.html#method-c-media_search","(type, ob_or_id, mash)",""],["merge","MovieMasher::AV","MovieMasher/AV.html#method-c-merge","(type1, type2)",""],["meta_path","MovieMasher::Info","MovieMasher/Info.html#method-c-meta_path","(type, path)",""],["metadata","MovieMasher::Asset","MovieMasher/Asset.html#method-i-metadata","()",""],["metadata","MovieMasher::Output","MovieMasher/Output.html#method-i-metadata","()",""],["method","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-method","()",""],["method=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-method-3D","(value)","<p>String &mdash; How to retrieve the file.\n<p>Constant &mdash; Method::Copy, Method::Move or Method::Symlink.\n<p>Default &mdash; Method::Symlink …\n"],["min","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-min","(a, b, digits = 3)",""],["mm_cmp","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_cmp","(param_string, mash, scope, output = nil)",""],["mm_dir_horz","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_dir_horz","(param_string, mash, scope, output = nil)",""],["mm_dir_vert","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_dir_vert","(param_string, mash, scope, output = nil)",""],["mm_fontfamily","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_fontfamily","(param_string, mash, scope, output = nil)",""],["mm_fontfile","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_fontfile","(param_string, mash, scope, output = nil)",""],["mm_horz","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_horz","(param_string, mash = nil, scope = nil, output = nil)",""],["mm_max","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_max","(param_string, mash, scope, output = nil)",""],["mm_min","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_min","(param_string, mash, scope, output = nil)",""],["mm_paren","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_paren","(param_string, mash, scope, output = nil)",""],["mm_textfile","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_textfile","(param_string, mash, scope, output = nil)",""],["mm_vert","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-mm_vert","(param_string, mash = nil, scope = nil, output = nil)",""],["module_for_type","MovieMasher::Defaults","MovieMasher/Defaults.html#method-c-module_for_type","(type, media_id = nil)",""],["module_source","MovieMasher::Clip","MovieMasher/Clip.html#method-i-module_source","()","<p>Transfer &mdash; Resolves relative font URLs for modules.\n<p>Default &mdash; Job#module_source\n<p>Types &mdash; Just TypeMash.\n"],["module_source","MovieMasher::Input","MovieMasher/Input.html#method-i-module_source","()","<p>Transfer &mdash; Resolves relative font URLs for modules.\n<p>Default &mdash; Job#module_source\n<p>Types &mdash; Just TypeMash.\n"],["module_source","MovieMasher::Job","MovieMasher/Job.html#method-i-module_source","()",""],["module_source=","MovieMasher::Job","MovieMasher/Job.html#method-i-module_source-3D","(value)","<p>Transfer &mdash; Resolves relative font paths within Media#source String values.\n<p>Default &mdash; #base_source\n\n"],["name","MovieMasher::Callback","MovieMasher/Callback.html#method-i-name","()",""],["name","MovieMasher::Output","MovieMasher/Output.html#method-i-name","()",""],["name","MovieMasher::Source","MovieMasher/Source.html#method-i-name","()",""],["name","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-name","()",""],["name=","MovieMasher::Callback","MovieMasher/Callback.html#method-i-name-3D","(value)","<p>String &mdash; The full or basename of file added to URL after #path. If full,  #extension\nwill be set and removed …\n\n"],["name=","MovieMasher::Output","MovieMasher/Output.html#method-i-name-3D","(value)","<p>String &mdash; Basename for rendered file.\n<p>Default &mdash; #type, or empty for TypeSequence.\n<p>Types &mdash; All, but TypeSequence …\n"],["name=","MovieMasher::Source","MovieMasher/Source.html#method-i-name-3D","(value)","<p>String &mdash; The full or basename of file appended to file path. If full,  #extension\nwill be set and removed …\n\n"],["name=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-name-3D","(value)","<p>String &mdash; The full or basename of file appended to file path. If full,  #extension\nwill be set and removed …\n\n"],["new","MovieMasher::Chain","MovieMasher/Chain.html#method-c-new","(input = nil, job_input = nil)",""],["new","MovieMasher::ChainModule","MovieMasher/ChainModule.html#method-c-new","(mod_input, mash_input, applied_input)",""],["new","MovieMasher::Error::JobRender","MovieMasher/Error/JobRender.html#method-c-new","(ffmpeg_result, msg = \"failed to render\")",""],["new","MovieMasher::Error::Runtime","MovieMasher/Error/Runtime.html#method-c-new","(msg = nil)",""],["new","MovieMasher::Hashable","MovieMasher/Hashable.html#method-c-new","(hash = nil)","<p>Set the actual Hash when creating.\n"],["new","MovieMasher::Input","MovieMasher/Input.html#method-c-new","(hash = nil)",""],["new","MovieMasher::Job","MovieMasher/Job.html#method-c-new","(hash_or_path)","<p>Create a new Job object from a nested structure or a file path.\n<p>hash_or_path &mdash; Hash or String expected to …\n\n"],["new","MovieMasher::Mash","MovieMasher/Mash.html#method-c-new","(hash)",""],["new","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-c-new","(path)",""],["new","MovieMasher::Output","MovieMasher/Output.html#method-c-new","(hash)",""],["new","MovieMasher::Source","MovieMasher/Source.html#method-c-new","(hash_or_string = nil)",""],["new","MovieMasher::SqsQueueService","MovieMasher/SqsQueueService.html#method-c-new","()",""],["new","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-c-new","(start = 0, rate = 0, length = 1)",""],["new","MovieMasher::Transfer","MovieMasher/Transfer.html#method-c-new","(hash = nil)",""],["no_audio","MovieMasher::Asset","MovieMasher/Asset.html#method-i-no_audio","()",""],["no_audio","MovieMasher::Output","MovieMasher/Output.html#method-i-no_audio","()",""],["no_audio=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-no_audio-3D","(value)","<p>Boolean &mdash; If true, audio in Asset will be ignored.\n<p>Default &mdash; Initially based on #type, but could change after …\n"],["no_audio=","MovieMasher::Output","MovieMasher/Output.html#method-i-no_audio-3D","(value)","<p>Boolean &mdash; If true, audio in inputs will not be included.\n<p>Default &mdash; FALSE\n<p>Types &mdash; Just TypeVideo, but accessible …\n"],["no_video","MovieMasher::Asset","MovieMasher/Asset.html#method-i-no_video","()",""],["no_video=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-no_video-3D","(value)","<p>Boolean &mdash; If true, video in Asset will be ignored.\n<p>Default &mdash; Initially based on #type, but could change after …\n"],["object","MovieMasher::Evaluate","MovieMasher/Evaluate.html#method-c-object","(data, scope = nil)",""],["offset","MovieMasher::Asset","MovieMasher/Asset.html#method-i-offset","()",""],["offset","MovieMasher::Input","MovieMasher/Input.html#method-i-offset","()",""],["offset=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-offset-3D","(value)","<p>Float &mdash; Seconds to remove from beginning of Asset.\n<p>Default &mdash; 0.0 means nothing removed.\n<p>Types &mdash; TypeAudio and …\n"],["offset=","MovieMasher::Input","MovieMasher/Input.html#method-i-offset-3D","(value)","<p>Float &mdash; Seconds to remove from beginning of input.\n<p>Default &mdash; 0.0 means nothing removed.\n<p>Types &mdash; TypeAudio and …\n"],["outputs","MovieMasher::Job","MovieMasher/Job.html#method-i-outputs","()","<p>Array &mdash; One or more Output objects.\n\n"],["outputs_desire","MovieMasher::Job","MovieMasher/Job.html#method-i-outputs_desire","()",""],["parameters","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-parameters","()",""],["parameters=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-parameters-3D","(value)","<p>Hash &mdash; Query string parameters to send with request for file. The values are\nevaluated, with Job and Input …\n"],["parse","MovieMasher::Info","MovieMasher/Info.html#method-c-parse","(type, ffmpeg_output)",""],["pass","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-pass","()",""],["pass=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-pass-3D","(value)","<p>String &mdash; Password for standard HTTP authentication.\n<p>Default &mdash; Nil means do not provide authenticating details. …\n"],["path","MovieMasher::Output","MovieMasher/Output.html#method-i-path","()",""],["path","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-path","()",""],["path=","MovieMasher::Output","MovieMasher/Output.html#method-i-path-3D","(value)","<p>String &mdash; Prepended to #name during upload.\n<p>Default &mdash; empty\n\n"],["path=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-path-3D","(value)","<p>String &mdash; Added to URL after #directory and before #name, with slash on either side.\n<p>Default &mdash; Nil means do …\n"],["port","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-port","()",""],["port=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-port-3D","(value)","<p>Integer &mdash; Port number to contact #host on.\n<p>Constant &mdash; Method::Copy, Method::Move or Method::Symlink.\n<p>Default … &mdash; "],["precision","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-precision","(f, digits = 3)",""],["precision","MovieMasher::Output","MovieMasher/Output.html#method-i-precision","()",""],["precision=","MovieMasher::Output","MovieMasher/Output.html#method-i-precision-3D","(value)","<p>Integer &mdash; Number of decimal places that Job#duration and #duration must match by for\nsuccessful rendering …\n"],["preflight","MovieMasher::Asset","MovieMasher/Asset.html#method-i-preflight","(job = nil)",""],["preflight","MovieMasher::Input","MovieMasher/Input.html#method-i-preflight","(job = nil)",""],["preflight","MovieMasher::Job","MovieMasher/Job.html#method-i-preflight","()",""],["preflight","MovieMasher::Mash","MovieMasher/Mash.html#method-i-preflight","(job = nil)",""],["preflight","MovieMasher::Output","MovieMasher/Output.html#method-i-preflight","(job)",""],["process","MovieMasher","MovieMasher.html#method-c-process","(object_or_path)","<p>object_or_path &mdash; Job object or String/Hash to be passed to Job.new along  with\n::configuration. After the …\n\n"],["process","MovieMasher::Job","MovieMasher/Job.html#method-i-process","()","<p>Downloads assets for each Input, renders each Output and uploads to\n#destination or Output#destination …\n"],["process_jobs","MovieMasher","MovieMasher.html#method-c-process_jobs","(array)","<p>Calls process for each item in array\n"],["process_queues","MovieMasher","MovieMasher.html#method-c-process_queues","(process_seconds = nil)","<p>Searches configured queue(s) for job(s) and processes.\n<p>process_seconds &mdash; overrides this same configuration …\n\n"],["progress","MovieMasher::Job","MovieMasher/Job.html#method-i-progress","()","<p>Current status of processing. The following keys are available:\n<p>:downloading &mdash; number of files referenced …\n"],["progress_seconds","MovieMasher::Callback","MovieMasher/Callback.html#method-i-progress_seconds","()",""],["progress_seconds=","MovieMasher::Callback","MovieMasher/Callback.html#method-i-progress_seconds-3D","(value)","<p>Integer &mdash; Seconds to wait before making requests.\n<p>Default &mdash; 44100\n<p>Triggers &mdash; Only TriggerProgress.\n"],["quality","MovieMasher::Output","MovieMasher/Output.html#method-i-quality","()",""],["quality=","MovieMasher::Output","MovieMasher/Output.html#method-i-quality-3D","(value)","<p>Integer &mdash; FFmpeg -q:v switch, 1 (best) to 32 (worst).\n<p>Default &mdash; 1\n<p>Types &mdash; TypeImage and TypeSequence.\n"],["query_parameters","MovieMasher::Service","MovieMasher/Service.html#method-c-query_parameters","()",""],["queues","MovieMasher::Service","MovieMasher/Service.html#method-c-queues","()",""],["rate","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-rate","()",""],["rate=","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-rate-3D","(n)",""],["receive_job","MovieMasher::FileQueueService","MovieMasher/FileQueueService.html#method-i-receive_job","()",""],["receive_job","MovieMasher::QueueService","MovieMasher/QueueService.html#method-i-receive_job","()",""],["receive_job","MovieMasher::SqsQueueService","MovieMasher/SqsQueueService.html#method-i-receive_job","()",""],["region","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-region","()",""],["region=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-region-3D","(value)","<p>String &mdash; Global AWS geographical region code.\n<p>Default &mdash; Nil means us-east-1 standard region.\n<p>Types &mdash; Just TypeS3 …\n"],["relative?","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-relative-3F","()",""],["required","MovieMasher::Output","MovieMasher/Output.html#method-i-required","()",""],["required=","MovieMasher::Output","MovieMasher/Output.html#method-i-required-3D","(value)","<p>Boolean &mdash; Whether or not Job should halt if output cannot be rendered or uploaded.\n<p>Default &mdash; nil\n\n"],["resolved_hash","MovieMasher::Job","MovieMasher/Job.html#method-c-resolved_hash","(hash_or_path)",""],["resolved_string","MovieMasher::Job","MovieMasher/Job.html#method-c-resolved_string","(hash_or_path)",""],["rgb","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-rgb","(param_string, mash = nil, scope = nil, output = nil)",""],["rgba","MovieMasher::FilterHelpers","MovieMasher/FilterHelpers.html#method-c-rgba","(param_string, mash = nil, scope = nil, output = nil)",""],["safe_path","MovieMasher::FileHelper","MovieMasher/FileHelper.html#method-c-safe_path","(path, mod = nil)",""],["secure","MovieMasher::HttpDownloadService","MovieMasher/HttpDownloadService.html#method-i-secure","()",""],["secure","MovieMasher::HttpUploadService","MovieMasher/HttpUploadService.html#method-i-secure","()",""],["secure","MovieMasher::HttpsDownloadService","MovieMasher/HttpsDownloadService.html#method-i-secure","()",""],["secure","MovieMasher::HttpsUploadService","MovieMasher/HttpsUploadService.html#method-i-secure","()",""],["set","MovieMasher::Info","MovieMasher/Info.html#method-c-set","(path, type, data)",""],["sort","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-sort","(a, b)",""],["source","MovieMasher::Asset","MovieMasher/Asset.html#method-i-source","()",""],["source=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-source-3D","(value)","<p>Describes the download request for the element, as either a URL or \nHash/Source. If the URL is relative …\n"],["sox","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-sox","()",""],["start","MovieMasher::Clip","MovieMasher/Clip.html#method-i-start","()",""],["start","MovieMasher::Input","MovieMasher/Input.html#method-i-start","()",""],["start","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-start","()",""],["start=","MovieMasher::Clip","MovieMasher/Clip.html#method-i-start-3D","(value)","<p>Float &mdash; Seconds from start of mashup to introduce the Clip.\n<p>Default &mdash; -1.0 means after previous audio in mashup …\n"],["start=","MovieMasher::Input","MovieMasher/Input.html#method-i-start-3D","(value)","<p>Float &mdash; Seconds from start of mashup to introduce the input.\n<p>Default &mdash; -1.0 means after previous audio in …\n"],["start=","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-start-3D","(n)",""],["start_seconds","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-start_seconds","(precision = 3)",""],["stop","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-stop","()",""],["string","MovieMasher::FloatUtil","MovieMasher/FloatUtil.html#method-c-string","(f, digits = 3)",""],["string_type","MovieMasher::Job","MovieMasher/Job.html#method-c-string_type","(hash_or_path)",""],["strip_slash_end","MovieMasher::Path","MovieMasher/Path.html#method-c-strip_slash_end","(s)",""],["strip_slash_start","MovieMasher::Path","MovieMasher/Path.html#method-c-strip_slash_start","(s)",""],["strip_slashes","MovieMasher::Path","MovieMasher/Path.html#method-c-strip_slashes","(s)",""],["symbolize_hash!","MovieMasher::Job","MovieMasher/Job.html#method-c-symbolize_hash-21","(hash)",""],["synchronize","MovieMasher::TimeRange","MovieMasher/TimeRange.html#method-i-synchronize","(time, rounding = :round)",""],["to_hash","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-to_hash","()","<p>Return deep copy of underlying Hash.\n"],["to_json","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-to_json","(state = nil)","<p>Return underlying Hash in JSON format.\n"],["to_s","MovieMasher::Error::Runtime","MovieMasher/Error/Runtime.html#method-i-to_s","()",""],["trigger","MovieMasher::Callback","MovieMasher/Callback.html#method-i-trigger","()",""],["trigger=","MovieMasher::Callback","MovieMasher/Callback.html#method-i-trigger-3D","(value)","<p>String &mdash; The event that fires the request.\n<p>Constant &mdash; TriggerInitiate, TriggerProgress, TriggerError or TriggerComplete …\n"],["type","MovieMasher::Asset","MovieMasher/Asset.html#method-i-type","()",""],["type","MovieMasher::Info","MovieMasher/Info.html#method-c-type","(path)",""],["type","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-type","()",""],["type","MovieMasher::Output","MovieMasher/Output.html#method-i-type","()",""],["type","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-type","()",""],["type=","MovieMasher::Asset","MovieMasher/Asset.html#method-i-type-3D","(value)","<p>String &mdash; The kind of Asset.\n<p>Constant &mdash; TypeAudio, TypeImage, TypeMash or TypeVideo.\n<p>Default &mdash; Probed from downloaded. …\n"],["type=","MovieMasher::Output","MovieMasher/Output.html#method-i-type-3D","(value)","<p>String &mdash; The kind of output.\n<p>Constant &mdash; TypeAudio, TypeImage, TypeSequence, TypeVideo or TypeWaveform.\n<p>Default … &mdash; "],["type=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-type-3D","(value)","<p>String &mdash; The kind of transfer.\n<p>Constant &mdash; TypeFile, TypeHttp, TypeHttps or TypeS3.\n<p>Default &mdash; TypeFile\n"],["upload","MovieMasher::Destination","MovieMasher/Destination.html#method-i-upload","(options)",""],["upload","MovieMasher::FileUploadService","MovieMasher/FileUploadService.html#method-i-upload","(options)",""],["upload","MovieMasher::HttpUploadService","MovieMasher/HttpUploadService.html#method-i-upload","(options)",""],["upload","MovieMasher::S3UploadService","MovieMasher/S3UploadService.html#method-i-upload","(options)",""],["upload","MovieMasher::UploadService","MovieMasher/UploadService.html#method-i-upload","(options)",""],["uploader","MovieMasher::Service","MovieMasher/Service.html#method-c-uploader","(type)",""],["url","MovieMasher::Asset","MovieMasher/Asset.html#method-i-url","(base_src = nil, module_src = nil)",""],["url","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-url","()",""],["url_count","MovieMasher::Mash","MovieMasher/Mash.html#method-i-url_count","(desired)",""],["user","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-user","()",""],["user=","MovieMasher::Transfer","MovieMasher/Transfer.html#method-i-user-3D","(value)","<p>String &mdash; Username for standard HTTP authentication.\n<p>Default &mdash; Nil means do not provide authenticating details. …\n"],["value","MovieMasher::Evaluate","MovieMasher/Evaluate.html#method-c-value","(v, scope)",""],["values","MovieMasher::Hashable","MovieMasher/Hashable.html#method-i-values","()",""],["video","MovieMasher::Mash","MovieMasher/Mash.html#method-i-video","()","<p>Array &mdash; One or more Track objects.\n\n"],["video_bitrate","MovieMasher::Output","MovieMasher/Output.html#method-i-video_bitrate","()",""],["video_bitrate=","MovieMasher::Output","MovieMasher/Output.html#method-i-video_bitrate-3D","(value)","<p>String &mdash; FFmpeg -b:v switch, placed after #video_codec and before #video_rate.\n<p>Integer &mdash; The character &#39;k&#39; …\n"],["video_codec","MovieMasher::Output","MovieMasher/Output.html#method-i-video_codec","()",""],["video_codec=","MovieMasher::Output","MovieMasher/Output.html#method-i-video_codec-3D","(value)","<p>String &mdash; FFmpeg -c:v switch, placed after #video_format and before #video_bitrate.\n<p>Default &mdash; libx264 -level …\n"],["video_duration","MovieMasher::MetaReader","MovieMasher/MetaReader.html#method-i-video_duration","()",""],["video_format","MovieMasher::Output","MovieMasher/Output.html#method-i-video_format","()",""],["video_format=","MovieMasher::Output","MovieMasher/Output.html#method-i-video_format-3D","(value)","<p>String &mdash; FFmpeg -f:v switch, placed after #dimensions and before #video_codec.\n<p>Default &mdash; nil\n<p>Types &mdash; Only TypeVideo …\n"],["video_ranges","MovieMasher::Mash","MovieMasher/Mash.html#method-c-video_ranges","(mash)",""],["video_rate","MovieMasher::Output","MovieMasher/Output.html#method-i-video_rate","()",""],["video_rate=","MovieMasher::Output","MovieMasher/Output.html#method-i-video_rate-3D","(value)","<p>String &mdash; FFmpeg -r:v switch, placed after #video_bitrate.\n<p>Default &mdash; 30\n<p>Types &mdash; TypeSequence and TypeVideo.\n"],["Documentation","","Documentation_md.html","","<p><img\nsrc=\"https://github.com/moviemasher/moviemasher.rb/raw/master/README/logo-120x60.png\">\n<strong>moviemasher.js</strong> …\n"],["README","","README_md.html","","<p><img\nsrc=\"https://rawgit.com/moviemasher/moviemasher.rb/master/README/logo-120x60.png\">\n<strong>moviemasher.js</strong> …\n"]]}}